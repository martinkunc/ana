@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject UserDisplayNameService DisplayNameService

<AuthorizeView>
    <Authorized>
        @DisplayNameService.DisplayName
        <button class="nav-link btn btn-link" @onclick="BeginLogOut">Log out</button>
    </Authorized>
    <NotAuthorized>
        <a href="authentication/login">Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var displayName = authState.User.Identity?.Name ?? "";
        DisplayNameService.DisplayName = displayName;
    }

    public async void BeginLogOut()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        // Get id_token from user claims if available
        var idTokenClaim = authState.User.Claims.FirstOrDefault(c => c.Type == "id_token");

        if (idTokenClaim != null)
        {
            Console.WriteLine("Adding id_token_hint to logout request");
            // Pass id_token_hint as query parameter in the logout URL
            Navigation.NavigateToLogout($"authentication/logout?id_token_hint={idTokenClaim.Value}");
        }
        else
        {
            Console.WriteLine("Warning: No id_token available for logout - PostLogoutRedirectUri may not work properly");
            Navigation.NavigateToLogout("authentication/logout");
        }
    }

    protected override void OnInitialized()
    {
        DisplayNameService.OnChange += StateHasChanged;
    }
    public void Dispose()
    {
        DisplayNameService.OnChange -= StateHasChanged;
    }
}
